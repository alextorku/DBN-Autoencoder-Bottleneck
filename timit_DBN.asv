%****************************In the Name of God****************************
% The purpose of this code is to extract bottleneck features for TIMIT data
% set(?LDC93S1) by using Deep Belief Network (DBN). 11 frames of 72 fbank features
% generated by HTK are feed into the Fine-tuned 5 hidden layer DBN network. 
% 50 features are extracted from bottleneck layer and are converted to 
% of many different types of data. Their most important use is as learning
% modules that are composed to form deep belief nets. With some changes, we
% can convert generative RBM to a discriminative RBM that can classify
% data.
% Ref: G. Hinton,"A practical guide to training restricted boltzmann
% machines,"Machine Learning Group, University of Toronto, Technical
% report, 2010.

% Permission is granted for anyone to copy, use, modify, or distribute this
% program and accompanying programs and documents for any purpose, provided
% this copyright notice is retained and prominently displayed, along with
% a note saying that the original programs are available from our web page.
%
% The programs and documents are distributed without any warranty, express
% or implied.  As the programs were written for research purposes only,
% they have not been tested to the degree that would be advisable in any
% important application.  All use of these programs is entirely at the
% user's own risk.

% CONTRIBUTORS
%	Created by:
%   	Hassan Taherian 
%   	09/2016
%           LIMP(Laboratory for Intelligent Multimedia Processing),
%           AUT(Amirkabir University of Technology), Tehran, Iran
%**************************************************************************
clc;
clear;
more off;
addpath(genpath('DeepLearnToolboxGPU'));
addpath('DeeBNet');
%filePath
inputTrainScript='+TIMIT/script/train.scp';
inputTestScript='+TIMIT/script/test.scp';
trainOutputScript='+TIMIT/script/train_output.scp';
testOutputScript='+TIMIT/script/test_output.scp';
trainBottleneckFeatures='+TIMIT/results/BNFeatures-train-50.txt';
testBottleneckFeatures='+TIMIT/results/BNFeatures-test-50.txt';
%use Saved .mat files
useSavedData=false;
useSavedDBNBeforeBP=false;
useSavedDBNAfterBP=false;
%feed the data form TIMIT
[data,trainMfcIndex,testMfcIndex,trainSamPeriod,testSamPeriod] = TIMIT.prepareTIMIT(inputTrainScript, inputTestScript,useSavedData); 
data.normalize('meanvar');  
data.shuffle();

%Select subset of test data for validation 
temp= DataClasses.DataStore();
temp.valueType=ValueType.gaussian;
temp.trainData= data.testData;
temp.shuffle();
temp.trainData=temp.trainData(1:10000,:);
data.validationData=temp.trainData;

fprintf(1,'Validation data set size: %d x %d\n', size(data.validationData,1),size(data.validationData,2));

dbn=DBN('autoEncoder');

%RBM1
rbmParams=RbmParameters(2000,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);

%RBM2
rbmParams=RbmParameters(700,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);

%RBM3
rbmParams=RbmParameters(50,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);


if(useSavedDBNBeforeBP)
    fprintf(1,'Using Saved .mat for DBN before Fine Tuning\n'); 
    load=matfile('+TIMIT/results/dbnBeforeBP.mat');
    dbn=load.dbn;
else
    dbn.train(data); %#ok
    save('+TIMIT/results/dbnBeforeBP.mat','dbn');
    fprintf(1,'RBM training Finished\n'); 
end 

if(useSavedDBNAfterBP)
    fprintf(1,'Using Saved .mat for DBN After Fine Tuning\n'); 
    load=matfile('+TIMIT/results/dbnAfterBP.mat');
    dbn=load.dbn;
else
    %train with GPU
    dbn.backpropagation(data,'yes',0); %#ok
    save('+TIMIT/results/dbnAfterBP.mat','dbn');
    fprintf(1,'RBM training Finished\n'); 
end 

%get the features
extractedFeature=DataClasses.DataStore();
m=5000; %%size of minibatch for extracting features
%% get the bottleneck features of training data
for i=1:ceil(size(data.trainData,1)/m)
    
    if(i~=ceil(size(data.trainData,1)/m))
         extractedFeature.trainData=[extractedFeature.trainData; dbn.getFeature(data.trainData((m*(i-1)+1:m*i),:),1,3,1)];
    else
         extractedFeature.trainData=[extractedFeature.trainData; dbn.getFeature(data.trainData((m*(i-1)+1:end),:),1,3,1)];
    end    
end

%% get the bottleneck features of test data
for i=1:ceil(size(data.testData,1)/m)
    
    if(i~=ceil(size(data.testData,1)/m))
         extractedFeature.testData=[extractedFeature.testData; dbn.getFeature(data.testData((m*(i-1)+1:m*i),:),1,3,1)];
        
    else
         extractedFeature.testData=[extractedFeature.testData; dbn.getFeature(data.testData((m*(i-1)+1:end),:),1,3,1)];
         
    end    
end

fprintf(1,'Train Extracted Feature size: %d x %d\n', size(extractedFeature.trainData,1),size(extractedFeature.trainData,2));
fprintf(1,'Test Extracted Feature size: %d x %d\n', size(extractedFeature.testData,1),size(extractedFeature.testData,2));


%%
%remove comments if you need features in text file format
%%Train
%dlmwrite(trainBottleneckFeatures,extractedFeature.trainData,'delimiter',' ');
%%Test
%dlmwrite(testBottleneckFeatures,extractedFeature.testData,'delimiter',' ');




%%
%convert to HTK format
fprintf(1,'Converting Bottleneck Features to HTK mfc format\n');
%%Train
[OutputFileList]=TIMIT.LoadScript(trainOutputScript);
for i=1:size(trainSamPeriod,1)
    %%we had to truncate the trainMfcIndex to have same size as rolling
    %%window concatenated frames
    [mfcFrames, ~]=find(trainMfcIndex==i);
    TIMIT.writehtk_lite(char(OutputFileList(i,:)),extractedFeature.trainData(mfcFrames,:),trainSamPeriod(1),9);
    disp([num2str(i) ':  ' char(OutputFileList(i,:)) ' Saved']);
end
%%TEST

[OutputFileList]=TIMIT.LoadScript(testOutputScript);
for i=1:size(testSamPeriod,1)
    [mfcFrames, ~]=find(testMfcIndex==i);
    TIMIT.writehtk_lite(char(OutputFileList(i,:)),extractedFeature.testData(mfcFrames,:),testSamPeriod(i),9);
    disp([num2str(i) ':  ' char(OutputFileList(i,:)) ' Saved']);
end

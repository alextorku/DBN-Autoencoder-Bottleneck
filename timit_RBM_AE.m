%****************************In the Name of God****************************
% The purpose of this code is to extract bottleneck features for TIMIT data
% set(?LDC93S1) by using Autoencoder which its initial weights are pretrained
% with Restricted Boltzman Machine (RBM). 11 frames of 72 fbank features
% generated by HTK are feed into the 3 layer stacked RBM network. 
% After training network weights are saved in a .txt format file and are
% use as initial weight value for autoencoder in CNTK. After CNTK training,
% 50 features are extracted form bottleneck layer and saved as standart HTK
% feature format which can be used for decoding.
% DBN is trained by DeeBNet Toolbox - Mohammad Ali Keyvanrad 
% (http://ceit.aut.ac.ir/~keyvanrad)

% Permission is granted for anyone to copy, use, modify, or distribute this
% program and accompanying programs and documents for any purpose, provided
% this copyright notice is retained and prominently displayed, along with
% a note saying that the original programs are available from our web page.
%
% The programs and documents are distributed without any warranty, express
% or implied.  As the programs were written for research purposes only,
% they have not been tested to the degree that would be advisable in any
% important application.  All use of these programs is entirely at the
% user's own risk.

% CONTRIBUTORS
%	Created by:
%   	Hassan Taherian
%   	09/2016
%
%           LIMP(Laboratory for Intelligent Multimedia Processing),
%           AUT(Amirkabir University of Technology), Tehran, Iran
% 
%**************************************************************************

clc;
clear;
more off;
addpath(genpath('DeepLearnToolboxGPU'));
addpath('DeeBNet');
% add your CNTKpath
CNTKExeDir='E:\Taherian\CNTK2-GPU\cntk\cntk';

%Constant FilePath
inputTrainScript='+TIMIT\script\train.scp';
inputTestScript='+TIMIT\script\test.scp';
trainOutputScript='+TIMIT\script\train_output.scp';
testOutputScript='+TIMIT\script\test_output.scp';
trainBottleneckFeatures='+TIMIT\results\BNFeatures-train-50.txt';
testBottleneckFeatures='+TIMIT\results\BNFeatures-test-50.txt';
CNTKConfigDir=strcat(pwd,'\+TIMIT\cntk-autoencoder');
CNTKPretrainedWeightDir=strcat(CNTKConfigDir,'\pretrainedDBNWeights');
%use Saved .mat files
useSavedData=true;
useSavedDBN=true;
%feed the data form TIMIT
[data,trainMfcIndex,testMfcIndex,trainSamPeriod,testSamPeriod] = TIMIT.prepareTIMIT(inputTrainScript, inputTestScript,useSavedData); 
data.normalize('meanvar');  
data.shuffle();

%Select subset of test data for validation 
temp= DataClasses.DataStore();
temp.valueType=ValueType.gaussian;
temp.trainData= data.testData;
temp.shuffle();
temp.trainData=temp.trainData(1:3000,:);
data.validationData=temp.trainData;

fprintf(1,'Validation data set size: %d x %d\n', size(data.validationData,1),size(data.validationData,2));

dbn=DBN('autoEncoder');

%RBM1
rbmParams=RbmParameters(2000,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);

%RBM2
rbmParams=RbmParameters(700,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);

%RBM3
rbmParams=RbmParameters(50,ValueType.binary);
rbmParams.maxEpoch=100;
rbmParams.samplingMethodType=SamplingClasses.SamplingMethodType.PCD;
rbmParams.performanceMethod='reconstruction';
rbmParams.rbmType=RbmType.generative;
rbmParams.gpu=1;
dbn.addRBM(rbmParams);


if(useSavedDBN)
    fprintf(1,'Using Saved .mat for DBN before Fine Tuning\n'); 
    load=matfile('+TIMIT/results/dbnBeforeBP.mat');
    dbn=load.dbn;
else
    dbn.train(data);
    save('+TIMIT/results/dbnBeforeBP.mat','dbn');
    fprintf(1,'RBM training Finished\n'); 
end 


 %get RBM weights for Bottom of CNTK's AUTOENCODER
for i=1:size(dbn.rbms,2)  
bias=dbn.rbms{i}.rbmParams.hidBias';
weight=dbn.rbms{i}.rbmParams.weight';
dlmwrite(sprintf('%s/Init-W%d.txt',CNTKPretrainedWeightDir,i-1),weight,'delimiter',' ');
fprintf(' W%d: %d x %d \n',i-1,size(weight,1),size(weight,2));
dlmwrite(sprintf('%s/Init-b%d.txt',CNTKPretrainedWeightDir,i-1),bias,'delimiter',' ');
fprintf(' b%d: %d x %d \n',i-1,size(bias,1),size(bias,2));
end
 %get RBM weights for Top of CNTK's AUTOENCODER
 n=size(dbn.rbms,2);
for i=1:n
bias=dbn.rbms{n-i+1}.rbmParams.visBias';
weight=dbn.rbms{n-i+1}.rbmParams.weight;
dlmwrite(sprintf('%s/Init-W%d.txt',CNTKPretrainedWeightDir,n+i-1),weight,'delimiter',' ');
fprintf(' W%d: %d x %d \n',n+i-1,size(weight,1),size(weight,2));
dlmwrite(sprintf('%s/Init-b%d.txt',CNTKPretrainedWeightDir,n+i-1),bias,'delimiter',' ');
fprintf(' b%d: %d x %d \n',n+i-1,size(bias,1),size(bias,2));
end


currDir=pwd;
cd (CNTKConfigDir);
   
    eval(strcat('!' ,CNTKExeDir,'\cntk.exe configFile=ae.cntk makemode=false'))
    fprintf('CNTK Autoencoder log is saved at: %s\\log\\log.txt\n',CNTKConfigDir)
cd(currDir);
